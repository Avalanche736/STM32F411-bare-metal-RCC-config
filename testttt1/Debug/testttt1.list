
testttt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b10  08000b10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b20  08000b20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b20  08000b20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b20  08000b20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000b34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b34  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c6b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ac9  00000000  00000000  00022ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  00023770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e8  00000000  00000000  00023ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f9c  00000000  00000000  00023da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000366f  00000000  00000000  00037d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ecb4  00000000  00000000  0003b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b88  00000000  00000000  000ba0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000af8 	.word	0x08000af8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000af8 	.word	0x08000af8

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  mySystemClockConfig();
 80001dc:	f000 f846 	bl	800026c <mySystemClockConfig>
  //hal delay works normal only if init tick after clock config

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e0:	200f      	movs	r0, #15
 80001e2:	f000 f983 	bl	80004ec <HAL_InitTick>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f80d 	bl	8000204 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 f9cd 	bl	800058c <HAL_Delay>
/*	  for (int var = 0; var < 96000000; ++var) {

	  }*/

	  HAL_GPIO_TogglePin(DISPLAY_BLK_GPIO_Port, DISPLAY_BLK_Pin);
 80001f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <main+0x28>)
 80001f8:	f000 fc3f 	bl	8000a7a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001fc:	e7f5      	b.n	80001ea <main+0x12>
 80001fe:	bf00      	nop
 8000200:	40020000 	.word	0x40020000

08000204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	2300      	movs	r3, #0
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_GPIO_Init+0x60>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <MX_GPIO_Init+0x60>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6313      	str	r3, [r2, #48]	; 0x30
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x60>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	f003 0301 	and.w	r3, r3, #1
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_BLK_GPIO_Port, DISPLAY_BLK_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <MX_GPIO_Init+0x64>)
 800023c:	f000 fc04 	bl	8000a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_BLK_Pin */
  GPIO_InitStruct.Pin = DISPLAY_BLK_Pin;
 8000240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	2301      	movs	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DISPLAY_BLK_GPIO_Port, &GPIO_InitStruct);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_GPIO_Init+0x64>)
 8000258:	f000 fa72 	bl	8000740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800025c:	bf00      	nop
 800025e:	3718      	adds	r7, #24
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000

0800026c <mySystemClockConfig>:

/* USER CODE BEGIN 4 */
void mySystemClockConfig() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	//enable hsi
	RCC->CR |= RCC_CR_HSION;
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <mySystemClockConfig+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a26      	ldr	r2, [pc, #152]	; (8000310 <mySystemClockConfig+0xa4>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]
	//wait while hsi is not ready
	while(!(RCC->CR & RCC_CR_HSIRDY)){}
 800027c:	bf00      	nop
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <mySystemClockConfig+0xa4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0302 	and.w	r3, r3, #2
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <mySystemClockConfig+0x12>

	//Power Enable Clock
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <mySystemClockConfig+0xa4>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <mySystemClockConfig+0xa4>)
 8000290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000294:	6413      	str	r3, [r2, #64]	; 0x40

	//Voltage Regulator
	PWR->CR |= PWR_CR_VOS;
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <mySystemClockConfig+0xa8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <mySystemClockConfig+0xa8>)
 800029c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002a0:	6013      	str	r3, [r2, #0]

	//Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <mySystemClockConfig+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <mySystemClockConfig+0xac>)
 80002a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002ac:	f043 0303 	orr.w	r3, r3, #3
 80002b0:	6013      	str	r3, [r2, #0]

	//configure the AHB, APB1, and APB2 prescaler
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <mySystemClockConfig+0xa4>)
 80002b4:	4a16      	ldr	r2, [pc, #88]	; (8000310 <mySystemClockConfig+0xa4>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <mySystemClockConfig+0xa4>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	4a14      	ldr	r2, [pc, #80]	; (8000310 <mySystemClockConfig+0xa4>)
 80002c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <mySystemClockConfig+0xa4>)
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <mySystemClockConfig+0xa4>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	6093      	str	r3, [r2, #8]
	//Configure the MAIN PLL
#define PLL_Q 4
#define PLL_P 0
#define PLL_N 96
#define PLL_M 8
	RCC->PLLCFGR = (PLL_Q << 24) | (PLL_P << 16) | (PLL_N << 6) | (PLL_M << 0);
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <mySystemClockConfig+0xa4>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <mySystemClockConfig+0xb0>)
 80002d2:	605a      	str	r2, [r3, #4]

	//Enable the PLL and wait for it to become ready
	RCC -> CR |= RCC_CR_PLLON;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <mySystemClockConfig+0xa4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <mySystemClockConfig+0xa4>)
 80002da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002de:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80002e0:	bf00      	nop
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <mySystemClockConfig+0xa4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <mySystemClockConfig+0x76>

	//Select the Clock Source and wait for it to be set
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <mySystemClockConfig+0xa4>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <mySystemClockConfig+0xa4>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80002fa:	bf00      	nop
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <mySystemClockConfig+0xa4>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	2b08      	cmp	r3, #8
 8000306:	d1f9      	bne.n	80002fc <mySystemClockConfig+0x90>

	//SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
	SystemCoreClockUpdate();
 8000308:	f000 f846 	bl	8000398 <SystemCoreClockUpdate>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40023800 	.word	0x40023800
 8000314:	40007000 	.word	0x40007000
 8000318:	40023c00 	.word	0x40023c00
 800031c:	04001808 	.word	0x04001808

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <NMI_Handler+0x4>

08000326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <MemManage_Handler+0x4>

08000332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <BusFault_Handler+0x4>

08000338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <UsageFault_Handler+0x4>

0800033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036c:	f000 f8ee 	bl	800054c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <SystemInit+0x20>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800037e:	4a05      	ldr	r2, [pc, #20]	; (8000394 <SystemInit+0x20>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b087      	sub	sp, #28
 800039c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	2302      	movs	r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	2302      	movs	r3, #2
 80003b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003b2:	4b34      	ldr	r3, [pc, #208]	; (8000484 <SystemCoreClockUpdate+0xec>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f003 030c 	and.w	r3, r3, #12
 80003ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	2b08      	cmp	r3, #8
 80003c0:	d011      	beq.n	80003e6 <SystemCoreClockUpdate+0x4e>
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	2b08      	cmp	r3, #8
 80003c6:	d844      	bhi.n	8000452 <SystemCoreClockUpdate+0xba>
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <SystemCoreClockUpdate+0x3e>
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d004      	beq.n	80003de <SystemCoreClockUpdate+0x46>
 80003d4:	e03d      	b.n	8000452 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80003d6:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <SystemCoreClockUpdate+0xf4>)
 80003da:	601a      	str	r2, [r3, #0]
      break;
 80003dc:	e03d      	b.n	800045a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 80003e0:	4a2b      	ldr	r2, [pc, #172]	; (8000490 <SystemCoreClockUpdate+0xf8>)
 80003e2:	601a      	str	r2, [r3, #0]
      break;
 80003e4:	e039      	b.n	800045a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003e6:	4b27      	ldr	r3, [pc, #156]	; (8000484 <SystemCoreClockUpdate+0xec>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	0d9b      	lsrs	r3, r3, #22
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003f2:	4b24      	ldr	r3, [pc, #144]	; (8000484 <SystemCoreClockUpdate+0xec>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00c      	beq.n	800041c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000402:	4a23      	ldr	r2, [pc, #140]	; (8000490 <SystemCoreClockUpdate+0xf8>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	fbb2 f3f3 	udiv	r3, r2, r3
 800040a:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <SystemCoreClockUpdate+0xec>)
 800040c:	6852      	ldr	r2, [r2, #4]
 800040e:	0992      	lsrs	r2, r2, #6
 8000410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	617b      	str	r3, [r7, #20]
 800041a:	e00b      	b.n	8000434 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800041c:	4a1b      	ldr	r2, [pc, #108]	; (800048c <SystemCoreClockUpdate+0xf4>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	fbb2 f3f3 	udiv	r3, r2, r3
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <SystemCoreClockUpdate+0xec>)
 8000426:	6852      	ldr	r2, [r2, #4]
 8000428:	0992      	lsrs	r2, r2, #6
 800042a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800042e:	fb02 f303 	mul.w	r3, r2, r3
 8000432:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <SystemCoreClockUpdate+0xec>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	3301      	adds	r3, #1
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	fbb2 f3f3 	udiv	r3, r2, r3
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 800044e:	6013      	str	r3, [r2, #0]
      break;
 8000450:	e003      	b.n	800045a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <SystemCoreClockUpdate+0xf4>)
 8000456:	601a      	str	r2, [r3, #0]
      break;
 8000458:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <SystemCoreClockUpdate+0xec>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	091b      	lsrs	r3, r3, #4
 8000460:	f003 030f 	and.w	r3, r3, #15
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <SystemCoreClockUpdate+0xfc>)
 8000466:	5cd3      	ldrb	r3, [r2, r3]
 8000468:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	fa22 f303 	lsr.w	r3, r2, r3
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <SystemCoreClockUpdate+0xf0>)
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	371c      	adds	r7, #28
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	20000000 	.word	0x20000000
 800048c:	00f42400 	.word	0x00f42400
 8000490:	017d7840 	.word	0x017d7840
 8000494:	08000b10 	.word	0x08000b10

08000498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800049e:	490e      	ldr	r1, [pc, #56]	; (80004d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004b4:	4c0b      	ldr	r4, [pc, #44]	; (80004e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004c2:	f7ff ff57 	bl	8000374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c6:	f000 faf3 	bl	8000ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ca:	f7ff fe85 	bl	80001d8 <main>
  bx  lr    
 80004ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004dc:	08000b28 	.word	0x08000b28
  ldr r2, =_sbss
 80004e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x54>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_InitTick+0x58>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	fbb3 f3f1 	udiv	r3, r3, r1
 8000506:	fbb2 f3f3 	udiv	r3, r2, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f90c 	bl	8000728 <HAL_SYSTICK_Config>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
 8000518:	e00e      	b.n	8000538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d80a      	bhi.n	8000536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 f8e2 	bl	80006f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <HAL_InitTick+0x5c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000532:	2300      	movs	r3, #0
 8000534:	e000      	b.n	8000538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	20000008 	.word	0x20000008
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_IncTick+0x20>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_IncTick+0x24>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_IncTick+0x24>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000008 	.word	0x20000008
 8000570:	20000028 	.word	0x20000028

08000574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return uwTick;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <HAL_GetTick+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff ffee 	bl	8000574 <HAL_GetTick>
 8000598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a4:	d005      	beq.n	80005b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_Delay+0x44>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	bf00      	nop
 80005b4:	f7ff ffde 	bl	8000574 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d8f7      	bhi.n	80005b4 <HAL_Delay+0x28>
  {
  }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000008 	.word	0x20000008

080005d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <__NVIC_GetPriorityGrouping+0x18>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	f003 0307 	and.w	r3, r3, #7
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db0a      	blt.n	800061a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <__NVIC_SetPriority+0x4c>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000618:	e00a      	b.n	8000630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <__NVIC_SetPriority+0x50>)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3b04      	subs	r3, #4
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	440b      	add	r3, r1
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000644:	b480      	push	{r7}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	f1c3 0307 	rsb	r3, r3, #7
 800065e:	2b04      	cmp	r3, #4
 8000660:	bf28      	it	cs
 8000662:	2304      	movcs	r3, #4
 8000664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3304      	adds	r3, #4
 800066a:	2b06      	cmp	r3, #6
 800066c:	d902      	bls.n	8000674 <NVIC_EncodePriority+0x30>
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3b03      	subs	r3, #3
 8000672:	e000      	b.n	8000676 <NVIC_EncodePriority+0x32>
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	f04f 32ff 	mov.w	r2, #4294967295
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43da      	mvns	r2, r3
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	401a      	ands	r2, r3
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43d9      	mvns	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	4313      	orrs	r3, r2
         );
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3724      	adds	r7, #36	; 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff8e 	bl	80005f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000702:	f7ff ff67 	bl	80005d4 <__NVIC_GetPriorityGrouping>
 8000706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6978      	ldr	r0, [r7, #20]
 800070e:	f7ff ff99 	bl	8000644 <NVIC_EncodePriority>
 8000712:	4602      	mov	r2, r0
 8000714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff68 	bl	80005f0 <__NVIC_SetPriority>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ffbb 	bl	80006ac <SysTick_Config>
 8000736:	4603      	mov	r3, r0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	e159      	b.n	8000a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800075c:	2201      	movs	r2, #1
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	429a      	cmp	r2, r3
 8000776:	f040 8148 	bne.w	8000a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f003 0303 	and.w	r3, r3, #3
 8000782:	2b01      	cmp	r3, #1
 8000784:	d005      	beq.n	8000792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800078e:	2b02      	cmp	r3, #2
 8000790:	d130      	bne.n	80007f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	2203      	movs	r2, #3
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4013      	ands	r3, r2
 80007a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	69ba      	ldr	r2, [r7, #24]
 80007c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c8:	2201      	movs	r2, #1
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	4013      	ands	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	f003 0201 	and.w	r2, r3, #1
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d017      	beq.n	8000830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2203      	movs	r2, #3
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4013      	ands	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4313      	orrs	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	2b02      	cmp	r3, #2
 800083a:	d123      	bne.n	8000884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	08da      	lsrs	r2, r3, #3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3208      	adds	r2, #8
 8000844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	220f      	movs	r2, #15
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4313      	orrs	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	08da      	lsrs	r2, r3, #3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3208      	adds	r2, #8
 800087e:	69b9      	ldr	r1, [r7, #24]
 8000880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0203 	and.w	r2, r3, #3
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f000 80a2 	beq.w	8000a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <HAL_GPIO_Init+0x2e8>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a56      	ldr	r2, [pc, #344]	; (8000a28 <HAL_GPIO_Init+0x2e8>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b54      	ldr	r3, [pc, #336]	; (8000a28 <HAL_GPIO_Init+0x2e8>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008e2:	4a52      	ldr	r2, [pc, #328]	; (8000a2c <HAL_GPIO_Init+0x2ec>)
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3302      	adds	r3, #2
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	220f      	movs	r2, #15
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a49      	ldr	r2, [pc, #292]	; (8000a30 <HAL_GPIO_Init+0x2f0>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d019      	beq.n	8000942 <HAL_GPIO_Init+0x202>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a48      	ldr	r2, [pc, #288]	; (8000a34 <HAL_GPIO_Init+0x2f4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d013      	beq.n	800093e <HAL_GPIO_Init+0x1fe>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a47      	ldr	r2, [pc, #284]	; (8000a38 <HAL_GPIO_Init+0x2f8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d00d      	beq.n	800093a <HAL_GPIO_Init+0x1fa>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <HAL_GPIO_Init+0x2fc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d007      	beq.n	8000936 <HAL_GPIO_Init+0x1f6>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a45      	ldr	r2, [pc, #276]	; (8000a40 <HAL_GPIO_Init+0x300>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_GPIO_Init+0x1f2>
 800092e:	2304      	movs	r3, #4
 8000930:	e008      	b.n	8000944 <HAL_GPIO_Init+0x204>
 8000932:	2307      	movs	r3, #7
 8000934:	e006      	b.n	8000944 <HAL_GPIO_Init+0x204>
 8000936:	2303      	movs	r3, #3
 8000938:	e004      	b.n	8000944 <HAL_GPIO_Init+0x204>
 800093a:	2302      	movs	r3, #2
 800093c:	e002      	b.n	8000944 <HAL_GPIO_Init+0x204>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <HAL_GPIO_Init+0x204>
 8000942:	2300      	movs	r3, #0
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	f002 0203 	and.w	r2, r2, #3
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	4093      	lsls	r3, r2
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4313      	orrs	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000954:	4935      	ldr	r1, [pc, #212]	; (8000a2c <HAL_GPIO_Init+0x2ec>)
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	089b      	lsrs	r3, r3, #2
 800095a:	3302      	adds	r3, #2
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <HAL_GPIO_Init+0x304>)
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	43db      	mvns	r3, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4013      	ands	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <HAL_GPIO_Init+0x304>)
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_GPIO_Init+0x304>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009b0:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <HAL_GPIO_Init+0x304>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <HAL_GPIO_Init+0x304>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <HAL_GPIO_Init+0x304>)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_GPIO_Init+0x304>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_GPIO_Init+0x304>)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	f67f aea2 	bls.w	800075c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40013c00 	.word	0x40013c00

08000a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	4613      	mov	r3, r2
 8000a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a58:	787b      	ldrb	r3, [r7, #1]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a64:	e003      	b.n	8000a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	041a      	lsls	r2, r3, #16
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	619a      	str	r2, [r3, #24]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a8c:	887a      	ldrh	r2, [r7, #2]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4013      	ands	r3, r2
 8000a92:	041a      	lsls	r2, r3, #16
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	619a      	str	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <__libc_init_array>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4d0d      	ldr	r5, [pc, #52]	; (8000ae8 <__libc_init_array+0x38>)
 8000ab4:	4c0d      	ldr	r4, [pc, #52]	; (8000aec <__libc_init_array+0x3c>)
 8000ab6:	1b64      	subs	r4, r4, r5
 8000ab8:	10a4      	asrs	r4, r4, #2
 8000aba:	2600      	movs	r6, #0
 8000abc:	42a6      	cmp	r6, r4
 8000abe:	d109      	bne.n	8000ad4 <__libc_init_array+0x24>
 8000ac0:	4d0b      	ldr	r5, [pc, #44]	; (8000af0 <__libc_init_array+0x40>)
 8000ac2:	4c0c      	ldr	r4, [pc, #48]	; (8000af4 <__libc_init_array+0x44>)
 8000ac4:	f000 f818 	bl	8000af8 <_init>
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	10a4      	asrs	r4, r4, #2
 8000acc:	2600      	movs	r6, #0
 8000ace:	42a6      	cmp	r6, r4
 8000ad0:	d105      	bne.n	8000ade <__libc_init_array+0x2e>
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad8:	4798      	blx	r3
 8000ada:	3601      	adds	r6, #1
 8000adc:	e7ee      	b.n	8000abc <__libc_init_array+0xc>
 8000ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae2:	4798      	blx	r3
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	e7f2      	b.n	8000ace <__libc_init_array+0x1e>
 8000ae8:	08000b20 	.word	0x08000b20
 8000aec:	08000b20 	.word	0x08000b20
 8000af0:	08000b20 	.word	0x08000b20
 8000af4:	08000b24 	.word	0x08000b24

08000af8 <_init>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	bf00      	nop
 8000afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afe:	bc08      	pop	{r3}
 8000b00:	469e      	mov	lr, r3
 8000b02:	4770      	bx	lr

08000b04 <_fini>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr
